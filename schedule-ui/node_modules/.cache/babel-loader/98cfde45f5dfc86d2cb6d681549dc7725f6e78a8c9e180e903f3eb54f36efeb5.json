{"ast":null,"code":"var _jsxFileName = \"/Users/leonofv/Downloads/TheaterScheduleProject-main/schedule-ui/src/components/account/AccountSettingsPage.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { Navigate } from 'react-router-dom';\nimport { Container } from 'semantic-ui-react';\nimport { useAuth } from '../context/AuthContext';\nimport { scheduleApi } from '../misc/ScheduleApi';\nimport { handleLogError } from '../misc/Helpers';\nimport AccountSettingsTab from './AccountSettingsTab';\nimport AccountPrivacyAccordion from './AccountPrivacyAccordion';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction AccountSettingsPage() {\n  _s();\n  const Auth = useAuth();\n  const user = Auth.getUser();\n  const [userMe, setUserMe] = useState('');\n  const [modalOpen, setModalOpen] = useState(false);\n  const [currentPassword, setCurrentPassword] = useState('');\n  const [newPassword, setNewPassword] = useState('');\n  const [userEmailStatus, setUserEmailStatus] = useState({});\n  useEffect(() => {\n    async function fetchData() {\n      try {\n        const response = await scheduleApi.getUserMe(user);\n        setUserMe(response.data);\n        const activationStatus = {};\n        activationStatus[response.data.username] = response.data.isEmailSubscribed;\n        setUserEmailStatus(activationStatus);\n      } catch (error) {\n        handleLogError(error);\n      }\n    }\n    fetchData();\n  }, [user]);\n  const handlePasswordChange = (e, {\n    name,\n    value\n  }) => {\n    if (name === 'currentPassword') {\n      setCurrentPassword(value);\n    } else if (name === 'newPassword') {\n      setNewPassword(value);\n    }\n  };\n  const handlePasswordApply = () => {\n    setModalOpen(false);\n    setCurrentPassword('');\n    setNewPassword('');\n  };\n  const handleUpdateUser = async username => {\n    try {\n      await scheduleApi.updateUser(user, username);\n    } catch (error) {\n      handleLogError(error);\n    }\n  };\n  const handleToggleEmailNotifications = async (username, isActive) => {\n    try {\n      await scheduleApi.toggleUserEmail(user, username, isActive);\n    } catch (error) {\n      handleLogError(error);\n    }\n  };\n  if (!Auth) {\n    return /*#__PURE__*/_jsxDEV(Navigate, {\n      to: \"/login\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: [/*#__PURE__*/_jsxDEV(AccountSettingsTab, {\n      userMe: userMe,\n      handlePasswordChange: handlePasswordChange,\n      handlePasswordApply: handlePasswordApply,\n      currentPassword: currentPassword,\n      newPassword: newPassword,\n      modalOpen: modalOpen,\n      setModalOpen: setModalOpen,\n      handleUpdateUser: handleUpdateUser,\n      userEmailStatus: userEmailStatus,\n      handleToggleEmailNotifications: handleToggleEmailNotifications\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(AccountPrivacyAccordion, {\n      userMe: userMe\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 5\n  }, this);\n}\n_s(AccountSettingsPage, \"bsLbHY4Qq4d205+UFKTrtLNVLSw=\", false, function () {\n  return [useAuth];\n});\n_c = AccountSettingsPage;\nexport default AccountSettingsPage;\nvar _c;\n$RefreshReg$(_c, \"AccountSettingsPage\");","map":{"version":3,"names":["React","useEffect","useState","Navigate","Container","useAuth","scheduleApi","handleLogError","AccountSettingsTab","AccountPrivacyAccordion","jsxDEV","_jsxDEV","AccountSettingsPage","_s","Auth","user","getUser","userMe","setUserMe","modalOpen","setModalOpen","currentPassword","setCurrentPassword","newPassword","setNewPassword","userEmailStatus","setUserEmailStatus","fetchData","response","getUserMe","data","activationStatus","username","isEmailSubscribed","error","handlePasswordChange","e","name","value","handlePasswordApply","handleUpdateUser","updateUser","handleToggleEmailNotifications","isActive","toggleUserEmail","to","fileName","_jsxFileName","lineNumber","columnNumber","children","_c","$RefreshReg$"],"sources":["/Users/leonofv/Downloads/TheaterScheduleProject-main/schedule-ui/src/components/account/AccountSettingsPage.js"],"sourcesContent":["import React, { useEffect, useState } from 'react'\nimport { Navigate } from 'react-router-dom'\nimport { Container } from 'semantic-ui-react'\nimport { useAuth } from '../context/AuthContext'\nimport { scheduleApi } from '../misc/ScheduleApi'\nimport { handleLogError } from '../misc/Helpers'\nimport AccountSettingsTab from './AccountSettingsTab'\nimport AccountPrivacyAccordion from './AccountPrivacyAccordion'\n\nfunction AccountSettingsPage() {\n  \n  const Auth = useAuth()\n  const user = Auth.getUser()\n  \n  const [userMe, setUserMe] = useState('')\n  const [modalOpen, setModalOpen] = useState(false);\n  const [currentPassword, setCurrentPassword] = useState('');\n  const [newPassword, setNewPassword] = useState('');\n  const [userEmailStatus, setUserEmailStatus] = useState({});\n\n\n  useEffect(() => {\n    async function fetchData() {\n      try {\n        const response = await scheduleApi.getUserMe(user);\n        setUserMe(response.data);\n        \n        const activationStatus = {};\n        activationStatus[response.data.username] = response.data.isEmailSubscribed;\n        setUserEmailStatus(activationStatus);\n      } catch (error) {\n        handleLogError(error);\n      }\n    }\n  \n    fetchData();\n  }, [user]);\n  \n\n  const handlePasswordChange = (e, { name, value }) => {\n    if (name === 'currentPassword') {\n      setCurrentPassword(value);\n    } else if (name === 'newPassword') {\n      setNewPassword(value);\n    }\n  };\n\n  const handlePasswordApply = () => {\n    setModalOpen(false);\n    setCurrentPassword('');\n    setNewPassword('');\n  };\n\n  const handleUpdateUser = async (username) => {\n    try {\n      await scheduleApi.updateUser(user, username)\n      \n    } catch (error) {\n      handleLogError(error)\n    }\n  }\n\n  const handleToggleEmailNotifications = async (username, isActive) => {\n    try {\n      await scheduleApi.toggleUserEmail(user, username, isActive)\n      \n    } catch (error) {\n      handleLogError(error)\n    }\n  }\n\n  if (!Auth) {\n    return <Navigate to='/login' />\n  }\n\n  return (\n    <Container>\n      <AccountSettingsTab\n        userMe={userMe}\n        handlePasswordChange={handlePasswordChange}\n        handlePasswordApply={handlePasswordApply}\n        currentPassword={currentPassword}\n        newPassword={newPassword}\n        modalOpen={modalOpen}\n        setModalOpen={setModalOpen}\n        handleUpdateUser={handleUpdateUser}\n        userEmailStatus={userEmailStatus}\n        handleToggleEmailNotifications={handleToggleEmailNotifications}\n      />\n      <AccountPrivacyAccordion\n      userMe={userMe}\n      />\n    </Container>\n  )\n}\n\nexport default AccountSettingsPage\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}